プログラムの基本形
    まずはプログラムの基本形について学びましょう。次のプログラムは何もしないプログラムです。
    この形式は今後解説するプログラムのほぼ全てに登場しますが、暗記する必要はありません。
        #include <bits/stdc++.h>
        using namespace std;

        int main() {
        }

    このプログラムについて知っておくべきことは、次で説明する「main関数」についてのみです。

    main関数
        C++のプログラムはmain関数から始まります。上のプログラムでは4行目から5行目までがmain関数です。
            int main() {
            }
        C++のプログラムを起動すると、main関数の{の次の行から実行され、それに対応する}に辿り着くとプログラムを終了します。
        このプログラムではmain関数の{ }の中に何も書いていないので、何もせずにプログラムは終了します。

        今後のプログラムでは基本的にmain関数の中だけを考えれば良いです。自分でプログラムを書く場合、main関数の外の部分はコピー＆ペーストしましょう。

    出力
        最初に提出したプログラムの詳細を見てみましょう。
        このプログラムは「Hello, world!」という文字列を出力する（画面に表示する）プログラムです。
            #include <bits/stdc++.h>
            using namespace std;

            int main() {
            cout << "Hello, world!" << endl;
            }

        実行結果
            Hello, world!
        
        先程述べた通り、main関数の中だけに注目しましょう。このプログラムのmain関数の中には次の1行のプログラムが書かれています。
            cout << "Hello, world!" << endl;
        この行が出力を行うプログラムです。この行について以下で詳しく説明します。
    
    cout
        C++で文字列を出力するには cout（しーあうと） を使います。

        出力する文字列を指定している部分は"Hello, world!"の部分です。
        C++プログラムの中で文字列を扱う場合、" "で囲う必要があります。endlは改行を表しています。

        "Hello, world!"とendlというデータを、<<でcoutに送っていくイメージと覚えると良いでしょう。

    セミコロン
        行の一番最後には;（セミコロン）が必要です。C++では、大抵の行の一番最後にはセミコロンが必要になります。どの行にセミコロンが必要でどの行に不要なのかは新しい文法を学んだ際に適宜見ていって下さい。
        セミコロンが必要なところで書き忘れるとエラーになるので、注意しましょう。

    複数の出力
        出力を複数回行うこともできます。
            #include <bits/stdc++.h>
            using namespace std;

            int main() {
            cout << "a";
            cout << "b" << endl;
            cout << "c" << "d" << endl;
            }

        実行結果
            ab
            cd
        このプログラムのポイントは2点です。
        まず、5行目で改行を表すendlを出力していないため、aの後に改行がされずにabと出力されます。
        次に、7行目でcout << "c" << "d"と書くことで、cdと出力することができます。この書き方を知っているとプログラムを短く書けることがあるので覚えておきましょう。
    
    数値の出力
        数値を出力するときは、" "を使わずに、直接書くことでも出力できます。
            #include <bits/stdc++.h>
            using namespace std;

            int main() {
            cout << 2525 << endl;
            }

        実行結果
            2525

    コメント
        コメントは人間が「プログラムがどういう動作をしているか」等のメモ書きをプログラム中に残しておくための機能です。
        プログラムとしての意味はないので、書いても動作に影響はありません。

        例を見てみてみましょう。
            #include <bits/stdc++.h>
            using namespace std;

            int main() {
            cout << "Hello, world!" << endl; //Hello, worldと表示
            /*ここも
            コメント*/
            }

        実行結果
            Hello, world!

        コメントには二種類の書き方があります。

        書き方	コメントになる場所
            //	同じ行の//を書いた場所より後
            /* */	/*と*/の間
        コメントを使わなくてもプログラムは書けますが、今後プログラム例の中で使うことがあるため、覚えておいて下さい。

注意点
    半角文字と全角文字
        基本的にC++プログラムの中に「全角文字」（あいう１２　等）が入り込むとエラー（AtCoderではCE）になってしまいます。
        プログラムを書くときは必ず「半角文字」（abc12 等）で書くようにしましょう。
        特に全角スペース「　」が入り込んでしまった場合、発見が難しくなってしまうので気をつけましょう。

        ただし、" "の中とコメント内では全角文字を使うことができます。
        コメントで全角文字を使った後、半角入力に戻し忘れて全角文字を紛れ込ませてしまう、というミスに気をつけましょう。

プログラムの書き方
    プログラム中のスペースと改行、およびインデントについて説明します。
    これらを使ってプログラムを読みやすくしておくと、エラーが発生した時に修正しやすくなります。

    スペースと改行
        C++では、基本的にスペースと改行は同じ意味になります。
        また、どちらも省略できることが多いです。

        以下の2つプログラムは全く同じ意味になります。
            #include <bits/stdc++.h>
            using namespace std;

            int main() {
            cout << "a";
            cout << "b" << endl;
            cout << "c" << "d" << endl;
            }


            #include <bits/stdc++.h>
            using namespace std;int main(){cout<<"a";cout<<"b"<<endl;cout<<"c"<<"d"<<endl;}

        実行結果
            ab
            cd
        詰め込んであるプログラムは読みづらいので、スペースと改行を多く使って読みやすく書くのが一般的です。
        スペースと改行の使い方に決まったルールはありません。一例としてサンプルプログラムを参考にしてください。
    
    インデント
        行のはじめにある連続したスペースのことをインデントと言います。
        スペースとインデントでプログラムの動作が変わることはありません。プログラムを見やすくするために行います。

        インデントはキーボードのTabキーを押して行います。TabキーはQキーの隣にあります。
            #include <bits/stdc++.h>
            using namespace std;

            int main() {
                //←インデント
                cout << "こんにちは世界" << endl;
            }

        基本的に{が出てきたら一段インデントし、}が出てきたら一段戻します。
        また、元々一行に書いていたプログラムが長くなった場合は、改行してインデントすることがあります。
            #include <bits/stdc++.h>
            using namespace std;

            int main() {
            cout << "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                << "abcdefghijklmnopqrstuvwxyz" // 長いので改行してインデント
                << endl;
            }
