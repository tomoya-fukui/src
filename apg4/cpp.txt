プログラムの基本形
    まずはプログラムの基本形について学びましょう。次のプログラムは何もしないプログラムです。
    この形式は今後解説するプログラムのほぼ全てに登場しますが、暗記する必要はありません。
        #include <bits/stdc++.h>
        using namespace std;

        int main() {
        }

    このプログラムについて知っておくべきことは、次で説明する「main関数」についてのみです。

    main関数
        C++のプログラムはmain関数から始まります。上のプログラムでは4行目から5行目までがmain関数です。
            int main() {
            }
        C++のプログラムを起動すると、main関数の{の次の行から実行され、それに対応する}に辿り着くとプログラムを終了します。
        このプログラムではmain関数の{ }の中に何も書いていないので、何もせずにプログラムは終了します。

        今後のプログラムでは基本的にmain関数の中だけを考えれば良いです。自分でプログラムを書く場合、main関数の外の部分はコピー＆ペーストしましょう。

    出力
        最初に提出したプログラムの詳細を見てみましょう。
        このプログラムは「Hello, world!」という文字列を出力する（画面に表示する）プログラムです。
            #include <bits/stdc++.h>
            using namespace std;

            int main() {
            cout << "Hello, world!" << endl;
            }

        実行結果
            Hello, world!
        
        先程述べた通り、main関数の中だけに注目しましょう。このプログラムのmain関数の中には次の1行のプログラムが書かれています。
            cout << "Hello, world!" << endl;
        この行が出力を行うプログラムです。この行について以下で詳しく説明します。
    
    cout
        C++で文字列を出力するには cout（しーあうと） を使います。

        出力する文字列を指定している部分は"Hello, world!"の部分です。
        C++プログラムの中で文字列を扱う場合、" "で囲う必要があります。endlは改行を表しています。

        "Hello, world!"とendlというデータを、<<でcoutに送っていくイメージと覚えると良いでしょう。

    セミコロン
        行の一番最後には;（セミコロン）が必要です。C++では、大抵の行の一番最後にはセミコロンが必要になります。どの行にセミコロンが必要でどの行に不要なのかは新しい文法を学んだ際に適宜見ていって下さい。
        セミコロンが必要なところで書き忘れるとエラーになるので、注意しましょう。

    複数の出力
        出力を複数回行うこともできます。
            #include <bits/stdc++.h>
            using namespace std;

            int main() {
            cout << "a";
            cout << "b" << endl;
            cout << "c" << "d" << endl;
            }

        実行結果
            ab
            cd
        このプログラムのポイントは2点です。
        まず、5行目で改行を表すendlを出力していないため、aの後に改行がされずにabと出力されます。
        次に、7行目でcout << "c" << "d"と書くことで、cdと出力することができます。この書き方を知っているとプログラムを短く書けることがあるので覚えておきましょう。
    
    数値の出力
        数値を出力するときは、" "を使わずに、直接書くことでも出力できます。
            #include <bits/stdc++.h>
            using namespace std;

            int main() {
            cout << 2525 << endl;
            }

        実行結果
            2525

    コメント
        コメントは人間が「プログラムがどういう動作をしているか」等のメモ書きをプログラム中に残しておくための機能です。
        プログラムとしての意味はないので、書いても動作に影響はありません。

        例を見てみてみましょう。
            #include <bits/stdc++.h>
            using namespace std;

            int main() {
            cout << "Hello, world!" << endl; //Hello, worldと表示
            /*ここも
            コメント*/
            }

        実行結果
            Hello, world!

        コメントには二種類の書き方があります。

        書き方	コメントになる場所
            //	同じ行の//を書いた場所より後
            /* */	/*と*/の間
        コメントを使わなくてもプログラムは書けますが、今後プログラム例の中で使うことがあるため、覚えておいて下さい。

注意点
    半角文字と全角文字
        基本的にC++プログラムの中に「全角文字」（あいう１２　等）が入り込むとエラー（AtCoderではCE）になってしまいます。
        プログラムを書くときは必ず「半角文字」（abc12 等）で書くようにしましょう。
        特に全角スペース「　」が入り込んでしまった場合、発見が難しくなってしまうので気をつけましょう。

        ただし、" "の中とコメント内では全角文字を使うことができます。
        コメントで全角文字を使った後、半角入力に戻し忘れて全角文字を紛れ込ませてしまう、というミスに気をつけましょう。

プログラムの書き方
    プログラム中のスペースと改行、およびインデントについて説明します。
    これらを使ってプログラムを読みやすくしておくと、エラーが発生した時に修正しやすくなります。

    スペースと改行
        C++では、基本的にスペースと改行は同じ意味になります。
        また、どちらも省略できることが多いです。

        以下の2つプログラムは全く同じ意味になります。
            #include <bits/stdc++.h>
            using namespace std;

            int main() {
            cout << "a";
            cout << "b" << endl;
            cout << "c" << "d" << endl;
            }


            #include <bits/stdc++.h>
            using namespace std;int main(){cout<<"a";cout<<"b"<<endl;cout<<"c"<<"d"<<endl;}

        実行結果
            ab
            cd
        詰め込んであるプログラムは読みづらいので、スペースと改行を多く使って読みやすく書くのが一般的です。
        スペースと改行の使い方に決まったルールはありません。一例としてサンプルプログラムを参考にしてください。
    
    インデント
        行のはじめにある連続したスペースのことをインデントと言います。
        スペースとインデントでプログラムの動作が変わることはありません。プログラムを見やすくするために行います。

        インデントはキーボードのTabキーを押して行います。TabキーはQキーの隣にあります。
            #include <bits/stdc++.h>
            using namespace std;

            int main() {
                //←インデント
                cout << "こんにちは世界" << endl;
            }

        基本的に{が出てきたら一段インデントし、}が出てきたら一段戻します。
        また、元々一行に書いていたプログラムが長くなった場合は、改行してインデントすることがあります。
            #include <bits/stdc++.h>
            using namespace std;

            int main() {
            cout << "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                << "abcdefghijklmnopqrstuvwxyz" // 長いので改行してインデント
                << endl;
            }

        インデントの幅はプログラムを書いている環境により異なり、スペース2個から8個分であることが多いです。
        どの程度の幅を使うかは基本的に自由ですが、プログラムを読みやすくするにはインデントの幅が統一されていることが重要です。

        今後複雑なプログラムを書くようになった場合、インデントをしているかどうかで大きく読みやすさが変わってきます。
        サンプルプログラムを参考にしっかりインデントをするようにしましょう。

    プログラムのエラー
        プログラムは書き終わったら完成ではありません。動かしてみてその動作が正しいことを確認して、はじめて完成と言えます。
        しかし書き終えたばかりのプログラムを実行しようとすると、たいてい何らかのエラーが発生します。そのときにエラーの原因を理解して修正できることもプログラマーの重要なスキルです。

        プログラムには主に3つのエラーがあります。

            コンパイルエラー
            実行時エラー
            論理エラー
        それぞれについて説明します。

    コンパイルエラー
        コンパイルエラーとは、書いたプログラムの文法にミスがあるときに発生するエラーです。
        全角文字がプログラム中に入り込んだり、文末の;を忘れたときなどにはコンパイルエラーになります。

        プログラミング言語では「文法」が厳密に決められています。
        日本語などの人間が使う言語では、文法的に少し崩れた文でも意図が通じますが、プログラミング言語ではそうはいきません。

        コンパイルエラーが起きた場合、プログラムは一切動作しません。

    実行時エラー
        「プログラムを動かす」ことを「プログラムを実行する」といいます。

        実行時エラーとは、プログラムの文法に間違いはなかったが、内容に致命的な間違いがあったときに発生するエラーです。
        具体的には3÷0のように、0で割り算を行ってしまった場合などに発生します。
        スマホアプリやゲーム等が強制終了してしまったとき、多くの場合実行時エラーが発生しています。

        実行時エラーが起きた場合、実行時エラーが起きる直前までプログラムは動作しますが、エラー以降は動かなくなってしまいます。

    論理エラー
        論理エラーとは、プログラムは一見正しく動作しているが、その動作が実は正しくないときに発生するエラーです。
        例えば、「300円のクッキーと100円のアメを買ったときに払うお金」を計算するプログラムでは300 + 100と計算するべきですが、間違って300 - 100としてしまった場合などは論理エラーに当たります。
        論理エラーは勘違いで生まれたり、タイピングのミスで発生したりと様々です。

        論理エラーは一見問題なくプログラムが動作してしまうため、発見することが難しくなりやすいです。

    エラーの直し方
        実行してエラーや出力を確認→プログラムを修正→実行してエラーや出力を確認→... を繰り返すことが基本的な流れです。

        エラーメッセージが表示される場合は、そのメッセージをコピー＆ペーストしてWeb検索してみるのも手です。
        特にコンパイルエラーに関しては、エラーメッセージで検索すると分かることが多々あります。

        調べてみてもよくわからない場合は、わかりそうな人に質問するのも良いでしょう。

    コンパイルエラーの例
        コンパイルエラーのうち、よくある3つの例を紹介します。

        コンパイルエラーの内容は英語で表示されますが、英語が読める必要はありません。
        エラーメッセージのパターンからなんとなく原因が推測できれば十分です。

    全角スペース
        全角スペースを紛れ込ませてしまうケースです。

        次のプログラムでは、coutの前に全角スペースが紛れ込んでいます。
            #include <bits/stdc++.h>
            using namespace std;

            int main() {
            //↓に全角スペース
            　cout << "Hello, world!" << endl;
            }

        コンパイルエラー
            ./Main.cpp:6:1: error: stray ‘\343’ in program
            　cout << "Hello, world!" << endl;
            ^
            ./Main.cpp:6:1: error: stray ‘\200’ in program
            ./Main.cpp:6:1: error: stray ‘\200’ in program

        error: stray ‘\343’ in program（エラー： ‘\343’がプログラム中に紛れ込んでいます）というエラーメッセージが表示されています。

        全角スペースのコンパイルエラーでは、stray ‘\343’ in programやstray ‘\200’ in programと表示されるのが特徴です。
        多くの場合、エラーメッセージがどこに全角スペースが入っているのかも教えてくれます。

        上記のケースでは./Main.cpp:6:1:と書いてあり、6行目の1文字目にエラーがあることがわかります。
        このように、エラーの発生箇所は./Main.cpp:行:文字目: errorを読めば特定できます。

        また、エラーメッセージの2行目に

        　cout << "Hello, world!" << endl;
        ^
        と書いてあり、coutの前に全角スペースがあることが視覚的にもわかります。

        ただし、エラーメッセージが示す位置は少しずれることもあるので注意してください。

    セミコロン忘れ
        セミコロン;が必要な行の末尾にセミコロンを付け忘れるケースです。

        次のプログラムでは、endlの後にセミコロンを付けるのを忘れてしまっています。
            #include <bits/stdc++.h>
            using namespace std;

            int main() {
            cout << "Hello, world!" << endl
            }

        コンパイルエラー
            ./Main.cpp: In function ‘int main()’:
            ./Main.cpp:6:1: error: expected ‘;’ before ‘}’ token
            }
            ^

        error: expected ‘;’ before ‘}’ token（エラー： ‘}’トークンの前に‘;’が予期されます）というエラーメッセージが表示されています。

        セミコロン忘れのコンパイルエラーでは、expected ‘;’ before ...というメッセージが表示されるのが特徴です。
        少しわかりにくいですが、このエラーメッセージは「エラーが発生した次の行」を指し示しています。

        上記のケースでは./Main.cpp:6:1: error:とあり、セミコロンを忘れた次の行である6行1文字目}の位置を指し示しています。

    大量のエラー・謎のエラー
        一つのミスで大量のエラーメッセージが出てくることもあります。また、エラーメッセージが直接的な原因を示していないことがあります。
        その場合は一番最初のエラーが指し示している場所を見て、原因を推測しましょう。

        次のプログラムではendlの直前の<<を<と書いてしまっただけのミスにより、大量に謎のエラーメッセージが表示されています。
            #include <bits/stdc++.h>
            using namespace std;

            int main() {
            cout << "hello" < endl;
            }

        コンパイルエラー
            ./Main.cpp: In function ‘int main()’:
            ./Main.cpp:5:19: error: no match for ‘operator<’ (operand types are ‘std::basic_ostream<char>’ and ‘<unresolved overloaded function type>’)
            cout << "hello" < endl;
                            ^
            In file included from /usr/include/c++/5/regex:61:0,
                            from /usr/include/x86_64-linux-gnu/c++/5/bits/stdc++.h:108,
                            from ./Main.cpp:1:
            /usr/include/c++/5/bits/regex.h:1426:5: note: candidate: template<class _Bi_iter> bool std::operator<(const std::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type&)
                operator<(const sub_match<_Bi_iter>& __lhs,
                ^
            /usr/include/c++/5/bits/regex.h:1426:5: note:   template argument deduction/substitution failed:
            ./Main.cpp:5:21: note:   ‘std::basic_ostream<char>’ is not derived from ‘const std::sub_match<_BiIter>’
            cout << "hello" < endl;
                                ^
            In file included from /usr/include/c++/5/regex:61:0,
                            from /usr/include/x86_64-linux-gnu/c++/5/bits/stdc++.h:108,
                ...
        
        大量のエラーメッセージが表示された場合、とりあえず一番最初のエラーメッセージだけを見ると良いです。

        一番最初のエラーメッセージだけを抜き出すと次のように表示されています。

            ./Main.cpp: In function ‘int main()’:
            ./Main.cpp:5:19: error: no match for ‘operator<’ (operand types are ‘std::basic_ostream<char>’ and ‘<unresolved overloaded function type>’)
            cout << "hello" < endl;
                            ^
        
        error: no match for ‘operator<’...と書いてありますが、このエラーメッセージはあまり参考になりません。
        このように、エラーメッセージが直接的な原因を示していないこともあります。

        エラーメッセージの内容がよくわからない場合でも、エラーの発生箇所は参考になることが多いです。
        この場合は./Main.cpp:5:19: error:と書いてあるので、5行目19文字目である次の部分でエラーが発生していることがわかります。
            cout << "hello" < endl;
                    ^

        エラーの発生箇所をよく見ると、<<を<と書き間違えていることがわかります。
        コンパイルエラーを直す際は、エラーの発生箇所から原因を推測することも大切です。